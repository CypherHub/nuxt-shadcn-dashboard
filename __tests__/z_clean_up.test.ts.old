import { config } from 'dotenv';
import { initializeApp } from 'firebase/app';
import { deleteUser, getAuth, signInWithEmailAndPassword } from 'firebase/auth';
import { getFirestore, doc, deleteDoc, getDoc } from 'firebase/firestore';

// Load environment variables from .env.test
config({ path: '.env.test' });

// Firebase configuration
const firebaseConfig = {
  apiKey: process.env.FIREBASE_API_KEY,
  authDomain: process.env.FIREBASE_AUTH_DOMAIN,
  projectId: process.env.FIREBASE_PROJECT_ID,
  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.FIREBASE_APP_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

describe('Cleanup Test Data', () => {
  // Add a dummy test to satisfy Jest's requirement
  test('cleanup test suite', () => {
    expect(true).toBe(true);
  });

  afterAll(async () => {
    const testUsers = [
      {
        email: 'student.enrollment@example.com',
        password: 'testPassword1234'
      },
      {
        email: 'teacher.enrollment@example.com',
        password: 'testPassword1234'
      }
    ];

    for (const user of testUsers) {
      try {
        // Try to sign in
        const credential = await signInWithEmailAndPassword(
          auth,
          user.email,
          user.password
        );
        
        if(auth.currentUser){
          console.log('Deleting test user from firestore', auth.currentUser.uid);
          await deleteDoc(doc(db, 'users', auth.currentUser.uid));
          console.log('Deleting test user', auth.currentUser.uid);
          await auth.currentUser.delete();
        }
        
      } catch (error: any) {
        // If user doesn't exist or can't be signed in, just continue
        console.log(`User ${user.email} not found or already deleted`, error);
        continue;
      }
    }
  });
}); 